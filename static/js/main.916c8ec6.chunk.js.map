{"version":3,"sources":["components/apiKeys.js","components/DayCard.js","components/DegreeToggle.js","components/WeatherContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","moment","require","DayCard","reading","degreeType","newDate","Date","weekday","dt","setTime","fahrenheit","Math","round","main","temp","celsius","imgURL","weather","id","className","format","x","description","toUpperCase","slice","UpperCase","DegreeToggle","updateDegree","type","name","value","checked","onChange","htmlFor","WeatherContainer","state","fullData","dailyData","e","setState","target","console","log","formatDayCards","map","index","key","componentDidMount","weatherUrl","apiConfig","owmKey","axios","get","then","res","data","list","filter","dt_txt","includes","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.916c8ec6.chunk.js","sourcesContent":["module.exports = {\r\n    \"owmKey\" : '7921c77339db9c5a51db3edf4b3059c7'\r\n}","import React from 'react';\r\nvar moment = require('moment');\r\n\r\nfunction UpperCase(reading){\r\n  var x = reading.weather[0].description;\r\n  var res = x[0].toUpperCase() + x.slice(1);\r\n  return res;\r\n}\r\n\r\nconst DayCard = ({ reading, degreeType }) => {\r\n  let newDate = new Date();\r\n  const weekday = reading.dt * 1000\r\n  newDate.setTime(weekday)\r\n\r\n  const fahrenheit = Math.round(reading.main.temp)\r\n  const celsius = Math.round((fahrenheit - 32) * 5/9)\r\n\r\n  const imgURL = `owf owf-${reading.weather[0].id} owf-5x`\r\n\r\n  return (\r\n    <div className=\"col-sm-2 border-color\">\r\n      <div className=\"card bg-info\">\r\n        <h5 className=\"card-title\">{moment(newDate).format('dddd')}</h5>\r\n        <p className=\"card-text text-white\">{moment(newDate).format('MMMM Do, h:mm a')}</p>\r\n        <i className={imgURL}></i>\r\n        <h2 className=\"text-white\">{degreeType === \"celsius\" ? celsius + \"°C\" : fahrenheit + \"°F\"}</h2>\r\n        <div className=\"card-body\">\r\n          <h6 className=\"card-text \">{UpperCase(reading)}</h6>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DayCard;","import React from 'react';\r\n\r\nconst DegreeToggle = ({updateDegree, degreeType }) => {\r\n    return (\r\n        <>\r\n        <div className=\"form-check form-check-inline\">\r\n            <input\r\n                type=\"radio\"\r\n                className=\"form-check-input\"\r\n                name=\"degree-type\"\r\n                id=\"celsius\"\r\n                value=\"celsius\"\r\n                checked={degreeType === \"celsius\"}\r\n                onChange={updateDegree}\r\n            />\r\n            <label htmlFor=\"celsius\" className=\"form-check-label\">Celsius</label>\r\n        </div>\r\n        <div className=\"form-check form-check-inline\">\r\n            <input\r\n                type=\"radio\"\r\n                className=\"form-check-input\"\r\n                name=\"degree-type\"\r\n                id=\"farenheit\"\r\n                value=\"fahrenheit\"\r\n                checked={degreeType === \"fahrenheit\"}\r\n                onChange={updateDegree}\r\n            />\r\n            <label htmlFor=\"farenheit\" className=\"form-check-label\">Farenheit</label>\r\n        </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default DegreeToggle;","import React, { Component} from 'react';\r\nimport apiConfig from './apiKeys'\r\nimport axios from 'axios'\r\nimport DayCard from './DayCard'\r\nimport DegreeToggle from './DegreeToggle'\r\n\r\nclass WeatherContainer extends Component{\r\n    state = {\r\n        fullData: [],\r\n        dailyData: [],\r\n        degreeType: \"fahrenheit\"\r\n    }\r\n\r\n    updateDegree = (e) => {\r\n        this.setState({\r\n            degreeType : e.target.value\r\n        }, () => console.log(this.state))\r\n    }\r\n\r\n    formatDayCards = () => {\r\n        return this.state.dailyData.map((reading, index) => <DayCard reading={reading} degreeType={this.state.degreeType} key={index}/>)\r\n    }\r\n\r\n    componentDidMount = () =>{\r\n        const weatherUrl = `http://api.openweathermap.org/data/2.5/forecast?zip=11102&units=imperial&APPID=${apiConfig.owmKey}`\r\n        axios.get(weatherUrl)\r\n            .then(res => {\r\n                const dailyData = res.data.list.filter(reading => {return reading.dt_txt.includes(\"06:00:00\")})\r\n                this.setState({\r\n                    fullData: res.data.list,\r\n                    dailyData: dailyData\r\n                })\r\n            })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"container col-sm-9\">\r\n                <h3 className=\"bg-info text-white display-2 jumbotron jumbotron-fluid\">5-Day Forecast</h3>\r\n                <h6 className=\"display-4 text-dark\">New York, US</h6>\r\n                <DegreeToggle updateDegree = {this.updateDegree} degreeType = {this.state.degreeType}/>\r\n                <div className=\"row justify-content-center\">\r\n                    {this.formatDayCards()}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WeatherContainer;","import React, {Component} from 'react';\nimport './App.css';\nimport WeatherContainer from './components/WeatherContainer'\n\nclass App extends Component{\n  render(){\n    return (\n      <div className=\"App\">\n        <WeatherContainer />\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}